apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "0000"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-persistent-storage
          mountPath: /var/lib/postgresql/data
        - name: remote-sql-volume
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-persistent-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: remote-sql-volume
        configMap:
          name: export-sql-configmap

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prayertime
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prayertime    # Ensure this matches the labels used in the Pod template
  template:
    metadata:
      labels:
        app: prayertime   # Make sure these labels match the selector above
    spec:
      containers:
      - name: prayertime
        image: olfasalem/prayertime:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8098
        env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:postgresql://postgres-service:5432/postgres
        - name: SPRING_DATASOURCE_USERNAME
          value: postgres
        - name: SPRING_DATASOURCE_PASSWORD
          value: "0000"
        - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
          value: http://eureka-server:8761/eureka/

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prayertime
    k8s-app: prayertime
  name: prayertime
spec:
  selector:
    app: prayertime
  ports:
  - name: http
    port: 8098
    protocol: TCP
    targetPort: 8098
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ramadan
spec:
  replicas: 3
  selector:
    matchLabels:
      app: hello
      tier: ramadan
      track: stable
  template:
    metadata:
      labels:
        app: hello
        tier: ramadan
        track: stable
    spec:
      containers:
      - name: suiviramadan
        image: olfaadevops.azurecr.io/suiviramadangit:22
        lifecycle:
          preStop:
            exec:
              command: ["/usr/sbin/nginx", "-s", "quit"]
        resources:
          limits:
            memory: "4Gi"
            cpu: "500m"
          requests:
            memory: "200Mi"
            cpu: "100m"
        env:
        - name: BACKEND_URL
          value: "http://prayertime:8098/api/prayers"
      imagePullSecrets:
      - name: my-secret
---
apiVersion: v1
kind: Service
metadata:
  name: ramadan
spec:
  selector:
    app: hello
    tier: ramadan
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: olfasalem/gateway:latest
        ports:
        - containerPort: 8080
        env:
        - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
          value: http://eureka-server:8761/eureka/
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  type: LoadBalancer
  selector:
    app: gateway
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eureka-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eureka-server
  template:
    metadata:
      labels:
        app: eureka-server
    spec:
      containers:
      - name: eureka-server
        image: olfasalem/eureka:latest
        ports:
        - containerPort: 8761
        env:
        - name: EUREKA_INSTANCE_HOSTNAME
          value: eureka
        - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
          value: "false"
        - name: EUREKA_CLIENT_FETCH_REGISTRY
          value: "false"
        - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
          value: "false"
---
apiVersion: v1
kind: Service
metadata:
  name: eureka-server
spec:
  selector:
    app: eureka-server
  ports:
  - protocol: TCP
    port: 8761
    targetPort: 8761
  type: NodePort

